#!/usr/bin/env node

// MUST be run with sudo!

var Speck = require('speck-sensor');
var fs = require('fs');
var program = require('commander');

var log = function(msg) {
  if (program.verbose) {
    console.warn(msg);
  }
}

// set up CLI flags
program
  .version('0.0.1')
  .option('-v, --verbose', 'Turn on verbose mode')
  .option('-i, --interval <seconds>', 'Set a detection interval; how often, in seconds, to read from the Speck; default 5', 5)
  .option('-s, --speck <id>', 'Specify a preferred Speck device from detected options',"")
  .parse(process.argv);

var ONE_MINUTE_IN_MILLIS = 60 * 1000;
var MAX_SECONDS_IN_FUTURE_FOR_NEW_SAMPLES = 3 * 60;   // 3 minutes

var speck = null;
  var csvFieldNames = [];
var sampleIntervalMillis = program.interval * 1000;
var dataSamplesFile = null;
var previousTimestamp = null;

var preferredSpeckPath = program.speck;

var readSample = function() {
   speck.getSample(function(err, dataSample) {

    if (err) {
     log("Error getting sample.  Will disconnect, wait 1 minute, and then reconnect and try again.  Error: " + err);
     try {
      speck.disconnect();
     }
     catch (e) {
      log("Error while trying to disconnect from the Speck: " + e);
     }

     setTimeout(connect, ONE_MINUTE_IN_MILLIS);
    }
    else {
     // if the sample wasn't null and the timestamp is positive, then a sample was found
     var wasDataFound = dataSample != null &&
              dataSample['sampleTimeSecs'] > 0;
     if (wasDataFound) {
      // make sure the timestamp is increasing (Bad Things may happen if the CSV isn't sorted asc by time)
      var isTimestampStrictlyIncreasing = previousTimestamp == null ||
                        previousTimestamp < dataSample['sampleTimeSecs'];
      if (isTimestampStrictlyIncreasing) {
         var maxTimeInFuture = (Date.now() / 1000) + MAX_SECONDS_IN_FUTURE_FOR_NEW_SAMPLES;
         if (dataSample['sampleTimeSecs'] < maxTimeInFuture) {
          previousTimestamp = dataSample['sampleTimeSecs'];

          // {"sampleTimeSecs":1401879009,"humidity":35,"rawParticleCount":1,"particleCount":132}

          var output = {
            sampletimesecs: dataSample["sampleTimeSecs"],
            humidity: dataSample["humidity"],
            rawparticlecount: dataSample["rawParticleCount"],
            particlecount: dataSample["particleCount"]
          }

          // output the data
          console.log(JSON.stringify(output));

         }
         else {
          log("Skipping sample because the timestamp is more than [" + MAX_SECONDS_IN_FUTURE_FOR_NEW_SAMPLES + "] seconds in the future: " + JSON.stringify(dataSample));
         }
      } else {
         log("Skipping sample because the timestamp is less than the previous timestamp [" + previousTimestamp + "]: " + JSON.stringify(dataSample));
      }
     } else {
      if (program.verbose) {
         log("No data found: " + JSON.stringify(dataSample));
       }
     }

     // If a sample was found, then try to read another immediately.  Otherwise, set the timeout interval to
     // whatever the Speck's logging interval is
     //setTimeout(readSample, wasDataFound ? 1 : sampleIntervalMillis);

     // No: read on the schedule: 
     setTimeout(readSample, sampleIntervalMillis);
    }
   });
};

var connect = function() {
   var speckHidDescriptors = Speck.enumerate();
   if (speckHidDescriptors.length <= 0) {
    log("No Specks found!");
   }
   else {
    log("Path names of all connected Specks:");

    var hidDescriptorOfPreferredSpeck = null;
    for (var i = 0; i < speckHidDescriptors.length; i++) {
     var hidDescriptor = speckHidDescriptors[i];
     log("   " + hidDescriptor.path);

     // remember this HID descriptor if the user specified a preferred path and this one matches
     if (preferredSpeckPath && hidDescriptor.path == preferredSpeckPath) {
      hidDescriptorOfPreferredSpeck = hidDescriptor;
     }
    }

    if (preferredSpeckPath) {
     log("Connecting to the Speck at path " + preferredSpeckPath + "...");
     try {
      speck = new Speck(hidDescriptorOfPreferredSpeck);
     }
     catch (e) {
      log("Failed to connect to the Speck at path " + preferredSpeckPath);
      speck = null;
     }
    }
    else {
     log("Connecting to the first Speck found...");
     speck = Speck.create();
    }
   }

   if (speck && speck.isConnected()) {
    // first, get the logging interval, so we know how often this Speck will be producing data for us
      // give the Speck a few seconds to start collecting data, and then kick of the initialization
      setTimeout(readSampleInitialization, 3000);
   }
   else {
    log("Failed to connect to a Speck.  Will retry in 1 minute.");
    setTimeout(connect, ONE_MINUTE_IN_MILLIS);
   }
};

var readSampleInitialization = function() {
   // get a current sample so we can build an array of field names
   speck.getCurrentSample(function(err, dataSample) {
    if (err) {
     log("Failed to get a current sample.  Aborting.  Error: " + err);
    }
    else {
     // get the field names
     csvFieldNames = [];
     for (var field in dataSample) {
      if (dataSample.hasOwnProperty(field)) {
         csvFieldNames.push(field);
      }
     }

     // Finally, kick of the reading of the samples
     readSample();
    }
   });
};

connect();
